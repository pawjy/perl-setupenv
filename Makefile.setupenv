# -*- Makefile -*-

# Makefile.setupenv - Setup local Perl environment for development

# Copyright 2012 Hatena <http://www.hatena.com/>.
# Copyright 2012 Wakaba <wakaba@suikawiki.org>.

# This file is DEPRECATED - use pmbp.pl directly, or use Makefile.pmbp.example instead.

# Repository: <https://github.com/wakaba/perl-setupenv>.
# Document: <https://github.com/wakaba/perl-setupenv/blob/master/README>.
# Usage: <https://raw.github.com/wakaba/perl-setupenv/master/Makefile>.

WGET = wget
GIT = git
PERL = perl
PERL_VERSION = latest
PERLBREW_PARALLEL_COUNT = 1
CARTON = local/perl-$(PERL_VERSION)/carton/bin/carton
CARTON_ABS = $(abspath $(CARTON))
CARTON_LIB = $(abspath local/perl-$(PERL_VERSION)/carton/lib/perl5)
CARTON_SUPPORT_BIN_PATH = $(abspath local/perl-$(PERL_VERSION)/carton/bin)
CPAN_SEARCH_HOST = search.cpan.org
CPANM = $(PERL) $(CARTON_SUPPORT_BIN_PATH)/cpanm
CPANM_MIRROR_OPTS = \
    --mirror $(abspath local/pmbundler/mirror) \
    --mirror http://$(CPAN_SEARCH_HOST)/CPAN \
    --mirror http://cpan.metacpan.org/ \
    --mirror http://backpan.perl.org/
CPANM_ = $(CPANM) --notest -l local/perl-$(PERL_VERSION)/carton \
    $(CPANM_MIRROR_OPTS)
SETUPENV_CPANM_OPTS = $(CPANM_MIRROR_OPTS)
PERL_PATH = $(abspath local/perlbrew/perls/perl-$(PERL_VERSION)/bin)
CARTON_ENV = PERL5LIB=$(CARTON_LIB) PATH=$(PERL_PATH):$(CARTON_SUPPORT_BIN_PATH):$(PATH) PERL_CARTON_PATH=local/perl-$(PERL_VERSION) SETUPENV_CPANM_OPTS="$(SETUPENV_CPANM_OPTS)"
PERL_ENV_PATH = PATH="$(abspath local/perl-$(PERL_VERSION)/pm/bin):$(PERL_PATH):$(PATH)"
PERL_ENV = $(PERL_ENV_PATH) PERL5LIB="`cat config/perl/libs.txt`"
SSH = ssh

REMOTEDEV_HOST = develop.test
REMOTEDEV_PERL_VERSION = latest
REMOTEDEV_GIT = git

SETUPENV_CURRENT_REVISION = 20121023
SETUPENV_MIN_REVISION = $(SETUPENV_CURRENT_REVISION)

all:

# ------ setupenv - Development environment setup tool ------

setupenv-update:
ifeq "$(sort $(SETUPENV_CURRENT_REVISION) $(SETUPENV_MIN_REVISION))" "$(SETUPENV_CURRENT_REVISION) $(SETUPENV_MIN_REVISION)"
#$(SETUPENV_CURRENT_REVISION) < $(SETUPENV_MIN_REVISION)
	$(WGET) -O Makefile.setupenv https://raw.github.com/wakaba/perl-setupenv/master/Makefile.setupenv
endif

local/setupenv/carton.20120529:
	mkdir -p local/setupenv
	touch $@

# ------ local-perl - Perl installation for your application ------

BASH = bash
PERLBREW_ENV_PATH = /usr/local/bin:/usr/bin:/bin

local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version:
	mkdir -p local/perlbrew/_perlinfo
ifeq "$(PERL_VERSION)" "latest"
	$(WGET) -O local/perlbrew/_perlinfo/JSON.sh https://raw.github.com/dominictarr/JSON.sh/master/JSON.sh
	$(WGET) -O local/perlbrew/_perlinfo/perl.json http://api.metacpan.org/release/perl
	cat local/perlbrew/_perlinfo/perl.json \
	    | $(BASH) local/perlbrew/_perlinfo/JSON.sh \
	    | grep "\[\"name\"\]" \
	    | perl -e '<> =~ /\["[^"]+"\]\s+"([^"]+)"/ ? print $$1 : "perl-5.16.0"' > $@
else
	perl -e "print 'perl-$(PERL_VERSION)'" > $@
endif

local/perlbrew/bin/perlbrew:
	mkdir -p local/
	$(WGET) -O local/install.perlbrew http://install.perlbrew.pl/
	PERLBREW_ROOT=$(abspath local/perlbrew) sh local/install.perlbrew

local-perl: local-perl-main $(CARTON_SUPPORT_BIN_PATH)/cpanm

local-perl-main: local/perlbrew/perls/perl-$(PERL_VERSION)/bin/perl

local/perlbrew/perls/perl-$(PERL_VERSION)/bin/perl: local/perlbrew/bin/perlbrew \
    local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version
ifeq "$(PERL_VERSION)" "latest"
	-PERLBREW_ROOT="$(abspath local/perlbrew)" local/perlbrew/bin/perlbrew \
	    alias delete perl-latest
endif
	PATH="$(PERLBREW_ENV_PATH)" \
	PERLBREW_ROOT="$(abspath local/perlbrew)" local/perlbrew/bin/perlbrew \
	    install `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` \
	    --notest --as `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` -j $(PERLBREW_PARALLEL_COUNT) || \
	ls local/perlbrew/perls/`cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version`/bin/perl
ifeq "$(PERL_VERSION)" "latest"
	PERLBREW_ROOT="$(abspath local/perlbrew)" local/perlbrew/bin/perlbrew \
	    alias create `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` perl-latest
endif

perl-exec:
	$(PERL_ENV) $(PERL) $(PERL_EXEC_ARGS)

perl-version:
	$(PERL_ENV) $(PERL) -v
	$(PERL_ENV) $(PERL) -e 'print for map { $$_ . "\n" } @INC'

LPERL_PATH = ./perl
LPROVE_PATH = ./prove
LPLACKUP_PATH = ./plackup

lperl:
	echo "#!/bin/sh" > $(LPERL_PATH)
	echo "$(subst ",\",$(PERL_ENV)) exec $(PERL) \"\$$@\"" >> $(LPERL_PATH)
	chmod ugo+x $(LPERL_PATH)

lprove: 
	echo "#!/bin/sh" > $(LPROVE_PATH)
	echo "$(PERL_ENV) exec $(PERL) `$(PERL_ENV_PATH) which prove || echo 'prove'` \"\$$@\"" >> $(LPROVE_PATH)
	chmod ugo+x $(LPROVE_PATH)

lplackup: 
	echo "#!/bin/sh" > $(LPLACKUP_PATH)
	echo "$(PERL_ENV) exec $(PERL) `$(PERL_ENV_PATH) which plackup || echo 'plackup'` \"\$$@\"" >> $(LPLACKUP_PATH)
	chmod ugo+x $(LPLACKUP_PATH)

# ------ carton 0.9 - Perl module management ------

# DEPRECATED - Use pmbp!

cpanm: $(CARTON_SUPPORT_BIN_PATH)/cpanm

carton: $(CARTON_SUPPORT_BIN_PATH)/carton

$(CARTON_SUPPORT_BIN_PATH)/real-cpanm:
	mkdir -p $(CARTON_SUPPORT_BIN_PATH)
	$(WGET) -O $@ http://cpanmin.us
	chmod u+x $@

$(CARTON_SUPPORT_BIN_PATH)/cpanm: $(CARTON_SUPPORT_BIN_PATH)/real-cpanm
	echo "#!/bin/sh" > $@
	echo "$(CARTON_SUPPORT_BIN_PATH)/real-cpanm \$$SETUPENV_CPANM_OPTS \$$*" >> $@
	chmod u+x $@

$(CARTON_SUPPORT_BIN_PATH)/carton: $(CARTON_SUPPORT_BIN_PATH)/cpanm \
    local/setupenv/carton.20120529
	$(CARTON_ENV) $(CPANM_) --reinstall ExtUtils::ParseXS
	$(CARTON_ENV) $(CPANM_) CPAN 
	mkdir -p $(CARTON_SUPPORT_BIN_PATH)/../lib/perl5/CPAN/
	echo "yes\nyes\nlocal::lib\n" | \
	    $(CARTON_ENV) perl -MCPAN -MCPAN::HandleConfig \
	    -e 'CPAN::HandleConfig->load; CPAN::HandleConfig->commit("$(CARTON_SUPPORT_BIN_PATH)/../lib/perl5/CPAN/MyConfig.pm")'
	$(CARTON_ENV) $(CPANM_) JSON::XS Getopt::Long \
	    Class::Data::Inheritable Devel::StackTrace Cwd Capture::Tiny
#	    Dist::Metadata::Archive \
#	    inc::Module::Install Module::Install::ReadmeFromPod \
#	    Module::Install::Repository
	#$(GIT) clone https://github.com/masaki/carton $(CARTON_SUPPORT_BIN_PATH)/../carton || (cd $(CARTON_SUPPORT_BIN_PATH)/../carton && $(GIT) pull)
	#$(CARTON_ENV) $(CPANM_) --reinstall $(CARTON_SUPPORT_BIN_PATH)/../carton
	#$(CARTON_ENV) $(CPANM_) --reinstall Carton
	$(CARTON_ENV) $(CPANM_) --reinstall MIYAGAWA/carton-v0.9.4.tar.gz
	#ln -s $(CARTON_SUPPORT_BIN_PATH)/../carton/bin/carton $@
	touch -c $@

config/perl/modules.txt:
	mkdir -p config/perl
	echo Carp > $@

config/perl/submodules.txt:
	mkdir -p config/perl
	touch $@

local/submodules/Makefile: config/perl/submodules.txt
	mkdir -p local/submodules
	echo "GIT = git" > $@
	echo "clone:" >> $@
	cat $< | perl -n -e 'chomp; undef $$branch; $$branch = $$1 if s{\s+(\S+)\s*$$}{}; m{([^/\s]+)$$}; $$dir = $$1; print "\t(\$$(GIT) clone $$_ || (cd $$dir && \$$(GIT) pull))\n"; print "\tcd $$dir && (\$$(GIT) checkout -b $$branch origin/$$branch || \$$(GIT) checkout $$branch)\n" if $$branch' >> $@

local-submodules: local/submodules/Makefile
	cd local/submodules && $(MAKE) clone

config/perl/libs.txt: $(CARTON_SUPPORT_BIN_PATH)/carton local-submodules
	mkdir -p config/perl
	$(CARTON_ENV) $(PERL) $(CARTON) exec -- \
	    $(PERL) -MCwd=abs_path -e 'push @INC, glob "local/submodules/*/lib"; unshift @INC, "lib", glob "modules/*/lib"; print join ":", map { abs_path() . "/" . $$_ } grep /^(?:local|lib|modules)/, @INC' > $@

carton-install: local-submodules carton.lock carton-install-main

carton.lock: $(CARTON_SUPPORT_BIN_PATH)/carton \
    config/perl/modules.txt \
    $(wildcard config/perl/modules.txt \
	       config/perl/modules.*.txt \
               modules/*/config/perl/modules.txt \
	       modules/*/config/perl/modules.*.txt \
               t/modules/*/config/perl/modules.txt \
	       t/modules/*/config/perl/modules.*.txt \
               t_deps/modules/*/config/perl/modules.txt \
	       t_deps/modules/*/config/perl/modules.*.txt \
	       local/submodules/*/config/perl/modules.txt \
	       local/submodules/*/config/perl/modules.*.txt)
	-cat config/perl/modules.txt config/perl/modules.*.txt \
	    modules/*/config/perl/modules.txt \
	    modules/*/config/perl/modules.*.txt \
	    t/modules/*/config/perl/modules.txt \
	    t/modules/*/config/perl/modules.*.txt \
	    t_deps/modules/*/config/perl/modules.txt \
	    t_deps/modules/*/config/perl/modules.*.txt \
	    local/submodules/*/config/perl/modules.txt \
	    local/submodules/*/config/perl/modules.*.txt | \
	$(CARTON_ENV) xargs $(PERL) $(CARTON) install

carton-update: $(CARTON_SUPPORT_BIN_PATH)/carton \
    config/perl/modules.txt \
    $(wildcard config/perl/modules.txt \
	       config/perl/modules.*.txt \
               modules/*/config/perl/modules.txt \
	       modules/*/config/perl/modules.*.txt \
               t/modules/*/config/perl/modules.txt \
	       t/modules/*/config/perl/modules.*.txt \
               t_deps/modules/*/config/perl/modules.txt \
	       t_deps/modules/*/config/perl/modules.*.txt \
	       local/submodules/*/config/perl/modules.txt \
	       local/submodules/*/config/perl/modules.*.txt)
	-cat config/perl/modules.txt config/perl/modules.*.txt \
	    modules/*/config/perl/modules.txt \
	    modules/*/config/perl/modules.*.txt \
	    t/modules/*/config/perl/modules.txt \
	    t/modules/*/config/perl/modules.*.txt \
	    t_deps/modules/*/config/perl/modules.txt \
	    t_deps/modules/*/config/perl/modules.*.txt \
	    local/submodules/*/config/perl/modules.txt \
	    local/submodules/*/config/perl/modules.*.txt | \
	$(CARTON_ENV) xargs $(PERL) $(CARTON) install

carton-install-main:
	-$(CARTON_ENV) $(PERL) $(CARTON) install --deployment

carton-install-module: $(CARTON_SUPPORT_BIN_PATH)/carton
	$(CARTON_ENV) $(PERL) $(CARTON) install \
	    $(CARTON_INSTALL_MODULE)

# ------ pmbundler - Perl package repository mirroring ------

# DEPRECATED - Use pmb!

# Document: doc/pmbundler.txt

PMBUNDLER_CPANM_ = $(CPANM) --notest -l local/pmbundler/install \
    $(CPANM_MIRROR_OPTS) --reinstall --save-dists local/pmbundler/mirror
PMBUNDLER_REPO_URL = 

local/pmbundler/deps.txt: carton.lock
	mkdir -p local/pmbundler
	$(CARTON_ENV) perl -MJSON::XS -e 'local $$/ = undef; my $$json = JSON::XS->new->utf8->decode(<>); my @list; for (values %{$$json->{modules}}) { push @list, ($$_->{module} || $$_->{target} || $$_->{name}) . "~" . ($$_->{mymeta}->{version} || $$_->{version}); } @list = sort @list; print $$_, "\n" for @list' $< > $@

pmbundler-repo-update:
	mkdir -p local/pmbundler/mirror
ifeq "$(PMBUNDLER_REPO_URL)" ""
else
	cd local/pmbundler && (($(GIT) clone $(PMBUNDLER_REPO_URL) mirror) || (cd mirror && $(GIT) pull))
endif

pmbundler-install: local/pmbundler/deps.txt pmbundler-repo-update
	mkdir -p local/pmbundler/install
	cat local/pmbundler/deps.txt | \
	    $(CARTON_ENV) xargs -n30 -- $(PMBUNDLER_CPANM_)

pmbundler-install-module: pmbundler-repo-update
	mkdir -p local/pmbundler/install
	$(CARTON_ENV) $(PMBUNDLER_CPANM_) $(PMBUNDLER_INSTALL_MODULE)

# ------ pmb - Perl module install from your small CPAN mirror ------

# DEPRECATED in favor of pmbp

# local/perl-latest $(PMB_LOCAL_DIR)
#   pmb             $(PMB_LOCAL_PMB_DIR)
#     bin           $(PMB_LOCAL_BIN_DIR)
#     tmp           $(PMB_LOCAL_TEMP_DIR)
#       cpanm       $(PMB_LOCAL_TEMP_CPANM_DIR)
#       install     $(PMB_LOCAL_TEMP_INSTALL_DIR)
#         lib
#           perl5   $(PMB_LOCAL_TEMP_PERLLIB_DIR)
#       empty       $(PMB_LOCAL_EMPTY_INSTALL_DIR)
#     pmpp          $(PMB_LOCAL_PMPP_DIR)
#     pmtar         $(PMB_LOCAL_PMTAR_DIR)
#   pm              $(PMB_LOCAL_INSTALL_DIR)

PMB_LOCAL_DIR = $(abspath local/perl-$(PERL_VERSION))
PMB_LOCAL_PMB_DIR = $(PMB_LOCAL_DIR)/pmb
PMB_LOCAL_INSTALL_DIR = $(PMB_LOCAL_DIR)/pm
PMB_LOCAL_BIN_DIR = $(PMB_LOCAL_PMB_DIR)/bin
PMB_LOCAL_TEMP_DIR = $(PMB_LOCAL_PMB_DIR)/tmp
PMB_LOCAL_TEMP_CPANM_DIR = $(PMB_LOCAL_TEMP_DIR)/cpanm
PMB_LOCAL_TEMP_INSTALL_DIR = $(PMB_LOCAL_TEMP_DIR)/install
PMB_LOCAL_TEMP_PERLLIB_DIR = $(PMB_LOCAL_TEMP_INSTALL_DIR)/lib/perl5
PMB_LOCAL_EMPTY_INSTALL_DIR = $(PMB_LOCAL_TEMP_DIR)/empty
PMB_LOCAL_PMPP_DIR = $(PMB_LOCAL_PMB_DIR)/pmpp
PMB_LOCAL_PMTAR_DIR = $(PMB_LOCAL_PMB_DIR)/pmtar

PERL_ARCHNAME = $(shell $(PERL_ENV) $(PERL) -MConfig -e 'print $$Config{archname}')

PMB_PMTAR_REPO_URL = 
PMB_PMPP_REPO_URL = 

pmb-pmtar-dir:
	mkdir -p $(PMB_LOCAL_PMB_DIR)
ifeq "$(PMB_PMTAR_REPO_URL)" ""
else
	cd $(PMB_LOCAL_PMB_DIR) && (($(GIT) clone $(PMB_PMTAR_REPO_URL) pmtar) || (cd pmtar && $(GIT) pull))
endif

pmb-pmpp-dir:
	mkdir -p $(PMB_LOCAL_PMB_DIR)
ifeq "$(PMB_PMPP_REPO_URL)" ""
else
	cd $(PMB_LOCAL_PMB_DIR) && (($(GIT) clone $(PMB_PMPP_REPO_URL) pmpp) || (cd pmpp && $(GIT) pull))
endif

# ---- cpanm ----

GZIP = gzip
PMB_CPANM = $(PMB_LOCAL_BIN_DIR)/cpanm
PMB_CPANM_PERL_ENV = $(PERL_ENV) PERL_CPANM_HOME="$(PMB_LOCAL_TEMP_CPANM_DIR)"
PMB_CPANM_PERL = $(PERL) -I$(PMB_LOCAL_TEMP_PERLLIB_DIR)
_PMB_CPANM_ = $(PMB_CPANM_PERL_ENV) $(PMB_CPANM_PERL) $(PMB_CPANM) --notest

PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE = --mirror $(abspath $(PMB_LOCAL_PMTAR_DIR)) \
    --mirror http://$(CPAN_SEARCH_HOST)/CPAN \
    --mirror http://cpan.metacpan.org/ \
    --mirror http://backpan.perl.org/
PMB_CPANM_MIRROR_PMB_LOCAL_ONLY = --mirror $(abspath $(PMB_LOCAL_PMTAR_DIR)) --mirror-only

$(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm: $(PMB_CPANM) $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-deps
	touch $@

$(PMB_CPANM):
	mkdir -p $(PMB_LOCAL_BIN_DIR)
	$(WGET) -O $@ http://cpanmin.us
	chmod u+x $@

$(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-deps: \
  $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-Module-CoreList \
  $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-common
	touch $@

$(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-Module-CoreList:
	$(PERL_ENV) $(PERL) -e 'use Module::CoreList' || \
	$(_PMB_CPANM_) -l $(PMB_LOCAL_TEMP_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE) \
	    --save-dists=$(PMB_LOCAL_PMTAR_DIR) --reinstall Module::CoreList~2.70
	mkdir -p $(PMB_LOCAL_TEMP_INSTALL_DIR)
	touch $@
# Module::CoreList 2.71 requires Perl 5.14...

$(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm-common:
	$(_PMB_CPANM_) -L $(PMB_LOCAL_TEMP_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE) \
	    --save-dists=$(PMB_LOCAL_PMTAR_DIR) \
	    --reinstall \
	    ExtUtils::ParseXS Module::Build File::ShareDir::Install JSON::PP \
	    ExtUtils::MakeMaker Archive::Zip
	touch $@

$(PMB_LOCAL_EMPTY_INSTALL_DIR)/common: $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	mkdir -p $(PMB_LOCAL_EMPTY_INSTALL_DIR)
	$(_PMB_CPANM_) -L $(PMB_LOCAL_EMPTY_INSTALL_DIR) $(PMB_CPANM_MIRROR_PMB_LOCAL_ONLY) \
	    ExtUtils::ParseXS Module::Build File::ShareDir::Install \
	    ExtUtils::MakeMaker Archive::Zip
	touch $@

$(PMB_LOCAL_INSTALL_DIR)/common: $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	$(_PMB_CPANM_) -L $(PMB_LOCAL_INSTALL_DIR) $(PMB_CPANM_MIRROR_PMB_LOCAL_ONLY) \
	    --reinstall \
	    ExtUtils::ParseXS Module::Build ExtUtils::MakeMaker
	touch $@ $(PMB_LOCAL_INSTALL_DIR)/common-local-or-remote

$(PMB_LOCAL_INSTALL_DIR)/common-local-or-remote: \
    $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	$(_PMB_CPANM_) -L $(PMB_LOCAL_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE) \
	    --reinstall \
	    ExtUtils::ParseXS Module::Build ExtUtils::MakeMaker
	touch $@ $(PMB_LOCAL_INSTALL_DIR)/common

# ---- Perl package list generation ----

CONFIG_PERL_MODULE_LIST_FILES = \
    config/perl/modules.txt \
    $(wildcard \
	       config/perl/modules.*.txt \
               modules/*/config/perl/modules.txt \
	       modules/*/config/perl/modules.*.txt \
               t/modules/*/config/perl/modules.txt \
	       t/modules/*/config/perl/modules.*.txt \
               t_deps/modules/*/config/perl/modules.txt \
	       t_deps/modules/*/config/perl/modules.*.txt \
	       local/submodules/*/config/perl/modules.txt \
	       local/submodules/*/config/perl/modules.*.txt)
CONFIG_PERL_INSTALL_LIST = config/perl/pmb-install.txt

pmb-update: pmb-pmtar-dir pmb-pmpp-dir \
    pmb-update-install-dir pmb-update-index pmb-update-pp \
    $(CONFIG_PERL_INSTALL_LIST) pmb-delete-temp-cpanm

pmb-update-install-dir: $(PMB_LOCAL_TEMP_INSTALL_DIR)/perl-modules

$(PMB_LOCAL_TEMP_INSTALL_DIR)/perl-modules: \
    $(CONFIG_PERL_MODULE_LIST_FILES) \
    $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	cat $(CONFIG_PERL_MODULE_LIST_FILES) | \
	grep -v '^#' | \
	sort -u | \
	$(PMB_CPANM_PERL_ENV) xargs -n20 -- \
	$(PMB_CPANM_PERL) $(PMB_CPANM) --notest \
	    -L $(PMB_LOCAL_TEMP_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE) \
	    --save-dists=$(PMB_LOCAL_PMTAR_DIR) 
	touch $@

pmb-update-index: $(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt.gz

pmb-update-pp:
	mkdir -p $(PMB_LOCAL_PMPP_DIR)
	mkdir -p $(PMB_LOCAL_TEMP_INSTALL_DIR)/bin
	mkdir -p $(PMB_LOCAL_TEMP_INSTALL_DIR)/lib
	cp -r -f $(PMB_LOCAL_TEMP_INSTALL_DIR)/bin $(PMB_LOCAL_PMPP_DIR)
	cp -r -f $(PMB_LOCAL_TEMP_INSTALL_DIR)/lib $(PMB_LOCAL_PMPP_DIR)
	rm -fr $(PMB_LOCAL_PMPP_DIR)/lib/perl5/$(PERL_ARCHNAME)

$(PMB_LOCAL_TEMP_DIR)/install.json.list: $(PMB_LOCAL_TEMP_INSTALL_DIR)/perl-modules
	mkdir -p $(PMB_LOCAL_TEMP_DIR)
	mkdir -p $(PMB_LOCAL_TEMP_PERLLIB_DIR)/$(PERL_ARCHNAME)/.meta
	find $(PMB_LOCAL_TEMP_PERLLIB_DIR)/$(PERL_ARCHNAME)/.meta -name install.json > $@

$(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.body: \
  $(PMB_LOCAL_TEMP_DIR)/install.json.list $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	echo > $@.tmp
	cat $(PMB_LOCAL_TEMP_DIR)/install.json.list | xargs -n1 -- \
	$(PMB_CPANM_PERL) -MJSON::PP -e ' \
          local $$/; $$data = decode_json <>; #\
	  exit unless -f "$(PMB_LOCAL_PMTAR_DIR)/authors/id/".$$data->{pathname}; #\
	  for (keys %{$$data->{provides}}) { #\
	    $$ver = $$data->{provides}->{$$_}->{version} || "undef"; #\
	    printf "%s %s  %s\n", #\
	      length $$_ < 32 ? $$_ . (" " x (32 - length $$_)) : $$_, #\
	      length $$ver < 10 ? (" " x (10 - length $$ver)) . $$ver : $$ver, #\
	      $$data->{pathname}; #\
          } #\
	' | sort >> $@.tmp
	-zcat $(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt.gz | \
	awk 'NF==0{is_body=1}is_body>1{print}is_body{is_body++}' >> $@.tmp
	cat $@.tmp | sort -u -k 1,1 | awk 'NF>0{print}' > $@

$(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt: \
  $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.body
	mkdir -p $(PMB_LOCAL_PMTAR_DIR)/modules
	echo "File: 02packages.details.txt" > $@
	echo "URL: http://www.perl.com/CPAN/modules/02packages.details.txt" >> $@
	echo "Description: Package names" >> $@
	echo "Columns: package name, version, path" >> $@
	echo "Intended-For: Automated fetch routines, namespace documentation." >> $@
	echo "Written-By: Makefile" >> $@
	echo "Line-Count: $(shell wc -l < $<)" >> $@
	echo "Last-Updated: $(shell perl -e 'print scalar localtime')" >> $@
	echo "" >> $@
	cat $< >> $@

$(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt.gz: \
  $(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt
	$(GZIP) -f $<

$(CONFIG_PERL_INSTALL_LIST): $(CONFIG_PERL_MODULE_LIST_FILES) \
    $(PMB_LOCAL_EMPTY_INSTALL_DIR)/common \
    $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.body
	mkdir -p config/perl
	$(WGET) -O $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.cpan.gz \
	    http://$(CPAN_SEARCH_HOST)/CPAN/modules/02packages.details.txt.gz
	zcat $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.cpan.gz | \
	    grep -v '^MyApp' | \
	    grep -v '^mod_perl' | \
	    grep -v '^DotsForArrows' | \
	    grep -v '^Demo' \
	    > $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.all
	cat $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.body >> $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.all
	echo "ExtUtils::ParseXS Module::Build File::ShareDir::Install `cat $(CONFIG_PERL_MODULE_LIST_FILES)`" | \
	sed 's/^POSIX$$//g' | \
	sort -u | \
	$(PMB_CPANM_PERL_ENV) xargs -n20 -- \
	$(PMB_CPANM_PERL) $(PMB_CPANM) --notest -L $(PMB_LOCAL_EMPTY_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_ONLY) \
	    --reinstall --scandeps | \
	sed 's/^\s*\\_\s*//' | \
	xargs -n1 -i% -- \
	    sh -c "grep \"%\" $(PMB_LOCAL_TEMP_DIR)/02packages.details.txt.all || echo \"% undef %\"" | \
	sort -u -k 3,3 | \
	sed 's/^\(\S\+\)\s\+\(\S\+\).*/\1~\2/g; s/~undef//; s/~v/~/; s/^MailTools\?$$/Mail/; s/^charstar/version/; s/^L4pResurrectable~.\+$$/Log::Log4perl/' > $@

pmb-delete-temp-cpanm:
	rm -fr $(PMB_LOCAL_TEMP_CPANM_DIR)

# ---- Install from pmb's local copy ----

pmb-install: \
    pmb-install-update \
    pmb-install-install \
    pmb-perl-libs.txt \
    pmb-delete-temp-cpanm \
    pmb-rewrite-shebang

pmb-install-update:
	ls $(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt.gz || \
	$(MAKE) --makefile Makefile.setupenv pmb-install-local-or-remote

pmb-install-install:
	(ls $(PMB_LOCAL_PMTAR_DIR)/modules/02packages.details.txt.gz && \
	$(MAKE) --makefile Makefile.setupenv pmb-install-local) || true

pmb-install-local: \
    pmb-pmtar-dir pmb-pmpp-dir \
    pmb-install-pp pmb-install-common pmb-install-xs

pmb-install-local-or-remote: \
    pmb-pmtar-dir pmb-pmpp-dir \
    pmb-install-pp \
    pmb-install-common-local-or-remote \
    pmb-install-xs-local-or-remote

pmb-install-common: $(PMB_LOCAL_INSTALL_DIR)/common

pmb-install-common-local-or-remote: \
    $(PMB_LOCAL_INSTALL_DIR)/common-local-or-remote

pmb-install-pp:
	mkdir -p $(PMB_LOCAL_PMPP_DIR)/bin
	mkdir -p $(PMB_LOCAL_PMPP_DIR)/lib
	mkdir -p $(PMB_LOCAL_INSTALL_DIR)
	cp -r -f $(PMB_LOCAL_PMPP_DIR)/bin $(PMB_LOCAL_INSTALL_DIR)
	cp -r -f $(PMB_LOCAL_PMPP_DIR)/lib $(PMB_LOCAL_INSTALL_DIR)

pmb-install-xs: $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	cat $(CONFIG_PERL_INSTALL_LIST) | \
	$(PMB_CPANM_PERL_ENV) xargs -n120 -- \
	$(PMB_CPANM_PERL) $(PMB_CPANM) --notest -L $(PMB_LOCAL_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_ONLY)

pmb-install-xs-local-or-remote: $(PMB_LOCAL_TEMP_INSTALL_DIR)/cpanm
	cat $(CONFIG_PERL_INSTALL_LIST) | \
	$(PMB_CPANM_PERL_ENV) xargs -n120 -- \
	$(PMB_CPANM_PERL) $(PMB_CPANM) --notest -L $(PMB_LOCAL_INSTALL_DIR) \
	    $(PMB_CPANM_MIRROR_PMB_LOCAL_OR_REMOTE) \
            --save-dists=$(PMB_LOCAL_PMTAR_DIR)

pmb-perl-libs.txt:
	mkdir -p config/perl
	echo $(wildcard $(abspath lib)) $(wildcard $(abspath modules/*/lib)) $(wildcard $(abspath local/submodules/*/lib)) | xargs -- perl -e 'print join "", map { $$_ . ":" } @ARGV; print "$(PMB_LOCAL_INSTALL_DIR)/lib/perl5/$(PERL_ARCHNAME):$(PMB_LOCAL_INSTALL_DIR)/lib/perl5"' -- > config/perl/libs.txt

pmb-Makefile.PL:
	echo "use inc::Module::Install; name 'Hoge';" > Makefile.PL
	cat config/perl/pmb-install.txt | \
	perl -n -e '($$name, $$ver) = split /[~\x0A]/, $$_; print "requires q<$$name>"; print " => q<$$ver>" if $$ver; print ";\n";' >> Makefile.PL
	echo "Meta->write; Meta->write_mymeta_json;" >> Makefile.PL

pmb-rewrite-shebang:
	ls $(PERL_PATH)/perl && ( \
	cd $(PMB_LOCAL_INSTALL_DIR)/bin && ls | \
        xargs -l1 -- sed -i '1 s/#!.*perl/#!$(subst /,\/,$(PERL_PATH)/perl)/' \
        ) || ( \
        cd $(PMB_LOCAL_INSTALL_DIR)/bin && ls | \
        xargs -l1 -- sed -i '1 s/#!.*perl/#!$(subst /,\/,$(shell which perl))/' \
        ) || true

# ------ pmbp - Perl application dependency manager ------

PMBP_PL_URL = https://github.com/wakaba/perl-setupenv/raw/master/bin/pmbp.pl

local/bin/pmbp.pl:
	mkdir -p local/bin
	$(WGET) -O $@ $(PMBP_PL_URL)

pmbp-self-update: local/bin/pmbp.pl
	$(PERL) local/bin/pmbp.pl --update-pmbp-pl

pmbp-update: local/bin/pmbp.pl pmbp-self-update
	$(PERL) local/bin/pmbp.pl --update

pmbp-install: local/bin/pmbp.pl pmbp-self-update
	$(PERL) local/bin/pmbp.pl --install \
	    --create-perl-command-shortcut perl \
	    --create-perl-command-shortcut prove \
	    --add-to-gitignore /perl \
	    --add-to-gitignore /prove

pmbp-lplackup: local/bin/pmbp.pl pmbp-self-update
	$(PERL) local/bin/pmbp.pl \
	    --create-perl-command-shortcut plackup \
	    --add-to-gitignore /plackup

# ------ PhantomJS ------

# Document: <http://phantomjs.org/build.html>

local-phantomjs: local-phantomjs-repo local-phantomjs-build

local-phantomjs-repo:
	$(GIT) clone https://github.com/ariya/phantomjs local/phantomjs || \
	(cd local/phantomjs && $(GIT) pull)
	cd local/phantomjs && ($(GIT) checkout 1.6 || $(GIT) checkout -b 1.6)
	cd local/phantomjs && $(GIT) submodule update --init

local-phantomjs-build:
	cd local/phantomjs && MAKEFLAGS="" sh build.sh

# ------ remotedev - Run tests at remote host ------

REMOTEDEV_PMBUNDLER_REPO_URL = $(PMBUNDLER_REPO_URL)

local/remotedev/remote-directory-name.txt:
	mkdir -p local/remotedev
	$(SSH) $(REMOTEDEV_HOST) "perl -MFile::Temp=tempdir -e 'print tempdir'" > $@

config/remotedev/getreponame.pl:
	mkdir -p config/remotedev
	echo 'my $$repo = `$(GIT) config --get remote.origin.url` or die "No origin URL";' > $@
	echo '$$repo =~ s{git\@github.com:}{https://github.com/};' >> $@
	echo '$$repo =~ tr/\x0D\x0A//d;' >> $@
	echo 'print $$repo;' >> $@

remotedev-upload: local/remotedev/remote-directory-name.txt config/remotedev/getreponame.pl
	$(SSH) $(REMOTEDEV_HOST) "mkdir -p $(shell cat local/remotedev/remote-directory-name.txt) && cd $(shell cat local/remotedev/remote-directory-name.txt) && (($(REMOTEDEV_GIT) clone $(shell $(PERL) config/remotedev/getreponame.pl) repo && cd repo && $(REMOTEDEV_GIT) checkout -b $(shell $(REMOTEDEV_GIT) name-rev --name-only HEAD) origin/$(shell $(REMOTEDEV_GIT) name-rev --name-only HEAD) && $(REMOTEDEV_GIT) submodule update --init) || (cd repo && ($(REMOTEDEV_GIT) checkout -b $(shell $(REMOTEDEV_GIT) name-rev --name-only HEAD) origin/$(shell $(REMOTEDEV_GIT) name-rev --name-only HEAD) || $(REMOTEDEV_GIT) checkout $(shell $(REMOTEDEV_GIT) name-rev --name-only HEAD)) && $(REMOTEDEV_GIT) pull && $(REMOTEDEV_GIT) submodule update --init))";

remotedev-setup: remotedev-upload
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && make Makefile.setupenv PERL_VERSION=$(REMOTEDEV_PERL_VERSION) && make --makefile Makefile.setupenv setupenv-update SETUPENV_MIN_REVISION=$(SETUPENV_CURRENT_REVISION) && make --makefile Makefile.setupenv local-perl PERL_VERSION=$(REMOTEDEV_PERL_VERSION) PMBUNDLER_REPO_URL=$(PMBUNDLER_REPO_URL)";

remotedev-reset:
	rm local/remotedev/remote-directory-name.txt

remotedev-reset-setupenv:
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && rm Makefile.setupenv"

remotedev-test: remotedev-setup
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && make test PERL_VERSION=$(REMOTEDEV_PERL_VERSION) PMBUNDLER_REPO_URL=$(REMOTEDEV_PMBUNDLER_REPO_URL)"

# ------ generatepm - Generate Perl module package distributions ------

generatepm: local/generatepm/bin/generate-pm-package

local/generatepm/bin/generate-pm-package: always
	mkdir -p local
	$(GIT) clone https://github.com/wakaba/generate-pm-package local/generatepm || (cd local/generatepm && $(GIT) pull)
	cd local/generatepm && $(GIT) submodule update --init
	cd local/generatepm && $(MAKE) all

# ------ cinnamon - Deployment tool ------

CINNAMON_GIT_REPOSITORY = https://github.com/wakaba/cinnamon
CINNAMON_PMB_PMTAR_REPO_URL = 
CINNAMON_PMB_PMPP_REPO_URL = 

cinnamon: cinnamon-repo cinnamon-deps cinnamon-link

cinnamon-repo:
	mkdir -p local
	cd local && (($(GIT) clone $(CINNAMON_GIT_REPOSITORY)) || (cd cinnamon && $(GIT) pull)) && cd cinnamon && $(GIT) submodule update --init

cinnamon-deps:
	cd local/cinnamon && \
	$(MAKE) deps \
	    PMB_PMTAR_REPO_URL=$(CINNAMON_PMB_PMTAR_REPO_URL) \
	    PMB_PMPP_REPO_URL=$(CINNAMON_PMB_PMPP_REPO_URL)

cinnamon-link: ./cin

./cin: always
	echo "#!/bin/sh" > $@
	echo "exec $(abspath local/cinnamon/perl) $(abspath local/cinnamon/bin/cinnamon) \"\$$@\"" >> $@
	chmod ugo+x $@

# ------ ------

always:
